{"id":"9417a32165068320bf6539656cc302ec","_format":"hh-sol-build-info-1","solcVersion":"0.8.24","solcLongVersion":"0.8.24+commit.e11b9ed9","input":{"language":"Solidity","sources":{"contracts/SimpleStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity  0.8.24;\n\ncontract SimpleStorage {\n    uint64 public favoriteNumber;\n\n    function store(uint64 _favoriteNumber) public {\n        favoriteNumber = _favoriteNumber;\n    }\n\n    struct Person {\n        string name;\n        uint age;\n    }\n\n    Person public daniel = Person(\"daniel\", 10);\n\n    Person public erazo = Person(\"erazo\", 42); \n\n    // VIEW FUNCTION ONLY READ INFORMATION WHICH DOES NOT NEED TO PERFORMA TRANSACTION\n    // ON THE BLOCKCHAIN\n    function getStore() public view returns(uint64) {\n        return favoriteNumber;\n    }\n\n    // PURE CAN NEITHER MODIFY NOR READ ANY STATE\n    function calculate() public pure returns(int) {\n        return 10 * 10;\n    }\n\n    Person[] public  persons;\n\n\n    // MEMORY AND CALLBACK ARE TEMPORABLE VARIABLES WHICH \n    // ONLY LAST FOR THE FUNCTION EXECUTION\n    // THE DIFERENCE BETWEEN MEMORY AND CALLBACK IS\n    // THAT CALLBACK ARE INMUTABLE\n    function pushPerson(string memory _name, uint _age) public {\n        persons.push(Person(_name, _age));\n        nameToAge[_name] = _age;\n    }\n\n\n    mapping (string => uint) public nameToAge;\n\n}\n\n"}},"settings":{"evmVersion":"paris","optimizer":{"enabled":true,"mode":"3"},"outputSelection":{"*":{"*":["abi","evm.methodIdentifiers","metadata"],"":["ast"]}},"libraries":{}}},"output":{"errors":[],"version":"0.8.24","long_version":"0.8.24+commit.e11b9ed9.Linux.g++","zk_version":"1.4.1","sources":{"contracts/SimpleStorage.sol":{"id":0,"ast":{"absolutePath":"contracts/SimpleStorage.sol","exportedSymbols":{"SimpleStorage":[82]},"id":83,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:0"},{"abstract":false,"baseContracts":[],"canonicalName":"SimpleStorage","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":82,"linearizedBaseContracts":[82],"name":"SimpleStorage","nameLocation":"67:13:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"471f7cdf","id":3,"mutability":"mutable","name":"favoriteNumber","nameLocation":"101:14:0","nodeType":"VariableDeclaration","scope":82,"src":"87:28:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2,"name":"uint64","nodeType":"ElementaryTypeName","src":"87:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"public"},{"body":{"id":12,"nodeType":"Block","src":"168:49:0","statements":[{"expression":{"id":10,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8,"name":"favoriteNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3,"src":"178:14:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":9,"name":"_favoriteNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5,"src":"195:15:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"178:32:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":11,"nodeType":"ExpressionStatement","src":"178:32:0"}]},"functionSelector":"1d9a3bdd","id":13,"implemented":true,"kind":"function","modifiers":[],"name":"store","nameLocation":"131:5:0","nodeType":"FunctionDefinition","parameters":{"id":6,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5,"mutability":"mutable","name":"_favoriteNumber","nameLocation":"144:15:0","nodeType":"VariableDeclaration","scope":13,"src":"137:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4,"name":"uint64","nodeType":"ElementaryTypeName","src":"137:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"136:24:0"},"returnParameters":{"id":7,"nodeType":"ParameterList","parameters":[],"src":"168:0:0"},"scope":82,"src":"122:95:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"canonicalName":"SimpleStorage.Person","id":18,"members":[{"constant":false,"id":15,"mutability":"mutable","name":"name","nameLocation":"254:4:0","nodeType":"VariableDeclaration","scope":18,"src":"247:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":14,"name":"string","nodeType":"ElementaryTypeName","src":"247:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":17,"mutability":"mutable","name":"age","nameLocation":"273:3:0","nodeType":"VariableDeclaration","scope":18,"src":"268:8:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":16,"name":"uint","nodeType":"ElementaryTypeName","src":"268:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Person","nameLocation":"230:6:0","nodeType":"StructDefinition","scope":82,"src":"223:60:0","visibility":"public"},{"constant":false,"functionSelector":"cce3c857","id":25,"mutability":"mutable","name":"daniel","nameLocation":"303:6:0","nodeType":"VariableDeclaration","scope":82,"src":"289:43:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Person_$18_storage","typeString":"struct SimpleStorage.Person"},"typeName":{"id":20,"nodeType":"UserDefinedTypeName","pathNode":{"id":19,"name":"Person","nameLocations":["289:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":18,"src":"289:6:0"},"referencedDeclaration":18,"src":"289:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_Person_$18_storage_ptr","typeString":"struct SimpleStorage.Person"}},"value":{"arguments":[{"hexValue":"64616e69656c","id":22,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"319:8:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_5494df8336b02cfaa52fa4e5e9fbae424ad9bb67b7dc33f23d521efa58d6cbc0","typeString":"literal_string \"daniel\""},"value":"daniel"},{"hexValue":"3130","id":23,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"329:2:0","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_5494df8336b02cfaa52fa4e5e9fbae424ad9bb67b7dc33f23d521efa58d6cbc0","typeString":"literal_string \"daniel\""},{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}],"id":21,"name":"Person","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"312:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Person_$18_storage_ptr_$","typeString":"type(struct SimpleStorage.Person storage pointer)"}},"id":24,"isConstant":false,"isLValue":false,"isPure":true,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"312:20:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Person_$18_memory_ptr","typeString":"struct SimpleStorage.Person memory"}},"visibility":"public"},{"constant":false,"functionSelector":"29ef62f0","id":32,"mutability":"mutable","name":"erazo","nameLocation":"353:5:0","nodeType":"VariableDeclaration","scope":82,"src":"339:41:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Person_$18_storage","typeString":"struct SimpleStorage.Person"},"typeName":{"id":27,"nodeType":"UserDefinedTypeName","pathNode":{"id":26,"name":"Person","nameLocations":["339:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":18,"src":"339:6:0"},"referencedDeclaration":18,"src":"339:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_Person_$18_storage_ptr","typeString":"struct SimpleStorage.Person"}},"value":{"arguments":[{"hexValue":"6572617a6f","id":29,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"368:7:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_387be7bb06708578d2937eb0a9032e280c66bc02ab8e216e9d5803e3ba93b528","typeString":"literal_string \"erazo\""},"value":"erazo"},{"hexValue":"3432","id":30,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"377:2:0","typeDescriptions":{"typeIdentifier":"t_rational_42_by_1","typeString":"int_const 42"},"value":"42"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_387be7bb06708578d2937eb0a9032e280c66bc02ab8e216e9d5803e3ba93b528","typeString":"literal_string \"erazo\""},{"typeIdentifier":"t_rational_42_by_1","typeString":"int_const 42"}],"id":28,"name":"Person","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"361:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Person_$18_storage_ptr_$","typeString":"type(struct SimpleStorage.Person storage pointer)"}},"id":31,"isConstant":false,"isLValue":false,"isPure":true,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"361:19:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Person_$18_memory_ptr","typeString":"struct SimpleStorage.Person memory"}},"visibility":"public"},{"body":{"id":39,"nodeType":"Block","src":"548:38:0","statements":[{"expression":{"id":37,"name":"favoriteNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3,"src":"565:14:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"functionReturnParameters":36,"id":38,"nodeType":"Return","src":"558:21:0"}]},"functionSelector":"c2722ecc","id":40,"implemented":true,"kind":"function","modifiers":[],"name":"getStore","nameLocation":"509:8:0","nodeType":"FunctionDefinition","parameters":{"id":33,"nodeType":"ParameterList","parameters":[],"src":"517:2:0"},"returnParameters":{"id":36,"nodeType":"ParameterList","parameters":[{"constant":false,"id":35,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":40,"src":"540:6:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":34,"name":"uint64","nodeType":"ElementaryTypeName","src":"540:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"539:8:0"},"scope":82,"src":"500:86:0","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":49,"nodeType":"Block","src":"688:31:0","statements":[{"expression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":47,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":45,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"705:2:0","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"3130","id":46,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"710:2:0","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"705:7:0","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"functionReturnParameters":44,"id":48,"nodeType":"Return","src":"698:14:0"}]},"functionSelector":"ca77ab65","id":50,"implemented":true,"kind":"function","modifiers":[],"name":"calculate","nameLocation":"651:9:0","nodeType":"FunctionDefinition","parameters":{"id":41,"nodeType":"ParameterList","parameters":[],"src":"660:2:0"},"returnParameters":{"id":44,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":50,"src":"683:3:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":42,"name":"int","nodeType":"ElementaryTypeName","src":"683:3:0","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"682:5:0"},"scope":82,"src":"642:77:0","stateMutability":"pure","virtual":false,"visibility":"public"},{"constant":false,"functionSelector":"a2f9eac6","id":54,"mutability":"mutable","name":"persons","nameLocation":"742:7:0","nodeType":"VariableDeclaration","scope":82,"src":"725:24:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Person_$18_storage_$dyn_storage","typeString":"struct SimpleStorage.Person[]"},"typeName":{"baseType":{"id":52,"nodeType":"UserDefinedTypeName","pathNode":{"id":51,"name":"Person","nameLocations":["725:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":18,"src":"725:6:0"},"referencedDeclaration":18,"src":"725:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_Person_$18_storage_ptr","typeString":"struct SimpleStorage.Person"}},"id":53,"nodeType":"ArrayTypeName","src":"725:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Person_$18_storage_$dyn_storage_ptr","typeString":"struct SimpleStorage.Person[]"}},"visibility":"public"},{"body":{"id":76,"nodeType":"Block","src":"1006:83:0","statements":[{"expression":{"arguments":[{"arguments":[{"id":65,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":56,"src":"1036:5:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":66,"name":"_age","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58,"src":"1043:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":64,"name":"Person","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"1029:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Person_$18_storage_ptr_$","typeString":"type(struct SimpleStorage.Person storage pointer)"}},"id":67,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1029:19:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Person_$18_memory_ptr","typeString":"struct SimpleStorage.Person memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Person_$18_memory_ptr","typeString":"struct SimpleStorage.Person memory"}],"expression":{"id":61,"name":"persons","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":54,"src":"1016:7:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Person_$18_storage_$dyn_storage","typeString":"struct SimpleStorage.Person storage ref[] storage ref"}},"id":63,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1024:4:0","memberName":"push","nodeType":"MemberAccess","src":"1016:12:0","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_Person_$18_storage_$dyn_storage_ptr_$_t_struct$_Person_$18_storage_$returns$__$attached_to$_t_array$_t_struct$_Person_$18_storage_$dyn_storage_ptr_$","typeString":"function (struct SimpleStorage.Person storage ref[] storage pointer,struct SimpleStorage.Person storage ref)"}},"id":68,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1016:33:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":69,"nodeType":"ExpressionStatement","src":"1016:33:0"},{"expression":{"id":74,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":70,"name":"nameToAge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":81,"src":"1059:9:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_uint256_$","typeString":"mapping(string memory => uint256)"}},"id":72,"indexExpression":{"id":71,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":56,"src":"1069:5:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1059:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":73,"name":"_age","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58,"src":"1078:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1059:23:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":75,"nodeType":"ExpressionStatement","src":"1059:23:0"}]},"functionSelector":"5d0f9a88","id":77,"implemented":true,"kind":"function","modifiers":[],"name":"pushPerson","nameLocation":"956:10:0","nodeType":"FunctionDefinition","parameters":{"id":59,"nodeType":"ParameterList","parameters":[{"constant":false,"id":56,"mutability":"mutable","name":"_name","nameLocation":"981:5:0","nodeType":"VariableDeclaration","scope":77,"src":"967:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":55,"name":"string","nodeType":"ElementaryTypeName","src":"967:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":58,"mutability":"mutable","name":"_age","nameLocation":"993:4:0","nodeType":"VariableDeclaration","scope":77,"src":"988:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":57,"name":"uint","nodeType":"ElementaryTypeName","src":"988:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"966:32:0"},"returnParameters":{"id":60,"nodeType":"ParameterList","parameters":[],"src":"1006:0:0"},"scope":82,"src":"947:142:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"constant":false,"functionSelector":"90c3ee4d","id":81,"mutability":"mutable","name":"nameToAge","nameLocation":"1128:9:0","nodeType":"VariableDeclaration","scope":82,"src":"1096:41:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_uint256_$","typeString":"mapping(string => uint256)"},"typeName":{"id":80,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":78,"name":"string","nodeType":"ElementaryTypeName","src":"1105:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"nodeType":"Mapping","src":"1096:24:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_uint256_$","typeString":"mapping(string => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":79,"name":"uint","nodeType":"ElementaryTypeName","src":"1115:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"}],"scope":83,"src":"58:1083:0","usedErrors":[],"usedEvents":[]}],"src":"32:1111:0"}}},"contracts":{"contracts/SimpleStorage.sol":{"SimpleStorage":{"abi":[{"inputs":[],"name":"calculate","outputs":[{"internalType":"int256","name":"","type":"int256"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"daniel","outputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"uint256","name":"age","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"erazo","outputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"uint256","name":"age","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"favoriteNumber","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStore","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"","type":"string"}],"name":"nameToAge","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"persons","outputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"uint256","name":"age","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_name","type":"string"},{"internalType":"uint256","name":"_age","type":"uint256"}],"name":"pushPerson","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"_favoriteNumber","type":"uint64"}],"name":"store","outputs":[],"stateMutability":"nonpayable","type":"function"}],"metadata":{"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_system_request_memoization_disabled":false,"is_verify_each_enabled":false,"jump_table_density_threshold":null,"level_back_end":"Aggressive","level_middle_end":"Aggressive","level_middle_end_size":"Zero"},"solc_metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"calculate\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daniel\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"age\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erazo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"age\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"favoriteNumber\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStore\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"nameToAge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"persons\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"age\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_age\",\"type\":\"uint256\"}],\"name\":\"pushPerson\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_favoriteNumber\",\"type\":\"uint64\"}],\"name\":\"store\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SimpleStorage.sol\":\"SimpleStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SimpleStorage.sol\":{\"keccak256\":\"0xf637fd0ad77682b81aca1cf94c1149d161d2639dc7f8918399f63aefe39a8091\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e0dd777935997f58f7d824c8a61613e3b85b6161949c654132592393326f06b3\",\"dweb:/ipfs/Qma7JMfJWboJVutqP3vNpYEqrNp597gxTdqDwNGX6CYuwN\"]}},\"version\":1}","solc_version":"0.8.24","solc_zkvm_edition":null,"zk_version":"1.4.1"},"evm":{"legacyAssembly":null,"assembly":"\t.text\n\t.file\t\"SimpleStorage.sol:SimpleStorage\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[9]\n\tadd\tr2, r0, r3\n\tptr.add\tr1, r0, stack[@ptr_calldata]\n\tadd\t128, r0, r4\n\tst.1\t64, r4\n\tadd\tr1, r0, r2\n\tshr.s\t96, r2, r2\n\tand\t@CPI0_0[0], r2, r2\n\tand!\t1, r3, r3\n\tjump.ne\t@.BB0_1\n\tsub.s!\t4, r2, r3\n\tjump.lt\t@.BB0_2\n\tld\tr1, r3\n\tshr.s\t224, r3, r3\n\tsub.s!\t@CPI0_9[0], r3, r5\n\tjump.le\t@.BB0_35\n\tsub.s!\t@CPI0_10[0], r3, r5\n\tjump.le\t@.BB0_41\n\tsub.s!\t@CPI0_11[0], r3, r1\n\tjump.eq\t@.BB0_60\n\tsub.s!\t@CPI0_12[0], r3, r1\n\tjump.eq\t@.BB0_112\n\tsub.s!\t@CPI0_13[0], r3, r1\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t1, r0, r3\n\tsload\tr3, r2\n\tand!\t1, r2, r5\n\tshr.s\t1, r2, r6\n\tand\t127, r6, r1\n\tadd.ne\tr6, r0, r1\n\tsub.s!\t31, r1, r6\n\tadd\t0, r0, r6\n\tadd.gt\t1, r0, r6\n\txor\tr2, r6, r6\n\tand!\t1, r6, r6\n\tjump.ne\t@.BB0_4\n\tst.1\t128, r1\n\tsub!\tr5, r0, r5\n\tjump.eq\t@.BB0_119\n\tst.1\t0, r3\n\tsub!\tr1, r0, r2\n\tjump.eq\t@.BB0_118\n\tadd\t@CPI0_21[0], r0, r2\n\tadd\tr0, r0, r3\n.BB0_122:\n\tsload\tr2, r5\n\tadd\t160, r3, r4\n\tst.1\tr4, r5\n\tadd\t1, r2, r2\n\tadd\t32, r3, r3\n\tsub!\tr3, r1, r5\n\tjump.lt\t@.BB0_122\n\tjump\t@.BB0_118\n.BB0_1:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t256, r0, r1\n\tst.1\t64, r1\n\tadd\t6, r0, r1\n\tst.1\t192, r1\n\tadd\t@CPI0_1[0], r0, r1\n\tst.1\t224, r1\n\tadd\t192, r0, r1\n\tst.1\t128, r1\n\tadd\t10, r0, r1\n\tst.1\t160, r1\n\tadd\t1, r0, r4\n\tsload\tr4, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r1\n\tand\t127, r1, r3\n\tadd.ne\tr1, r0, r3\n\tsub.s!\t31, r3, r1\n\tadd\t0, r0, r1\n\tadd.gt\t1, r0, r1\n\tsub!\tr2, r1, r1\n\tjump.eq\t@.BB0_6\n.BB0_4:\n\tadd\t@CPI0_27[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_28[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_6:\n\tsub.s!\t32, r3, r1\n\tjump.lt\t@.BB0_11\n\tadd\tr3, r0, stack-[8]\n\tadd\tr4, r0, stack-[9]\n\tadd\t1, r0, r1\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_2[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tadd\tstack-[8], r0, r2\n\tadd\t31, r2, r2\n\tshr.s\t5, r2, r2\n\tadd\tr1, r2, r2\n\tsub!\tr1, r2, r3\n\tadd\tstack-[9], r0, r4\n\tjump.ge\t@.BB0_11\n.BB0_10:\n\tsstore\tr1, r0\n\tadd\t1, r1, r1\n\tsub!\tr1, r2, r3\n\tjump.lt\t@.BB0_10\n.BB0_11:\n\tld.1\t224, r1\n\tand\t@CPI0_3[0], r1, r1\n\tor\t12, r1, r1\n\tsstore\tr4, r1\n\tadd\t2, r0, r1\n\tld.1\t160, r2\n\tsstore\tr1, r2\n\tld.1\t64, r1\n\tsub.s!\t@CPI0_4[0], r1, r2\n\tjump.ge\t@.BB0_12\n\tadd\t64, r1, r6\n\tst.1\t64, r6\n\tsub.s!\t@CPI0_5[0], r1, r2\n\tjump.gt\t@.BB0_12\n\tadd\t128, r1, r2\n\tst.1\t64, r2\n\tadd\t5, r0, r2\n\tst.1\tr6, r2\n\tadd\t32, r1, r7\n\tadd\t42, r0, r2\n\tst.1\tr7, r2\n\tst.1\tr1, r6\n\tadd\t96, r1, r9\n\tadd\t@CPI0_6[0], r0, r1\n\tst.1\tr9, r1\n\tld.1\tr6, r5\n\tsub.s!\t@CPI0_7[0], r5, r1\n\tjump.gt\t@.BB0_12\n\tadd\t3, r0, r8\n\tsload\tr8, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r2\n\tand\t127, r2, r3\n\tadd.ne\tr2, r0, r3\n\tsub.s!\t31, r3, r2\n\tadd\t0, r0, r2\n\tadd.gt\t1, r0, r2\n\txor\tr1, r2, r1\n\tand!\t1, r1, r1\n\tjump.ne\t@.BB0_4\n\tsub.s!\t32, r3, r1\n\tjump.lt\t@.BB0_19\n\tadd\tr3, r0, stack-[3]\n\tadd\tr9, r0, stack-[4]\n\tadd\tr6, r0, stack-[5]\n\tadd\tr5, r0, stack-[8]\n\tadd\tr7, r0, stack-[7]\n\tadd\tr4, r0, stack-[9]\n\tadd\tr8, r0, stack-[6]\n\tst.1\t0, r8\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_2[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[8], r0, r5\n\tadd\t31, r5, r2\n\tshr.s\t5, r2, r2\n\tsub.s!\t32, r5, r3\n\tadd.lt\tr0, r0, r2\n\tld\tr1, r3\n\tadd\tstack-[3], r0, r1\n\tadd\t31, r1, r1\n\tshr.s\t5, r1, r1\n\tadd\tr3, r1, r1\n\tadd\tr3, r2, r2\n\tsub!\tr2, r1, r3\n\tadd\tstack-[9], r0, r4\n\tadd\tstack-[7], r0, r7\n\tadd\tstack-[6], r0, r8\n\tadd\tstack-[5], r0, r6\n\tadd\tstack-[4], r0, r9\n\tjump.ge\t@.BB0_19\n.BB0_20:\n\tsstore\tr2, r0\n\tadd\t1, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.lt\t@.BB0_20\n.BB0_19:\n\tsub.s!\t31, r5, r1\n\tjump.le\t@.BB0_30\n\tadd\tr6, r0, stack-[5]\n\tadd\tr5, r0, stack-[8]\n\tadd\tr7, r0, stack-[7]\n\tadd\tr4, r0, stack-[9]\n\tadd\tr8, r0, stack-[6]\n\tst.1\t0, r8\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_2[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tsub.s\t32, r0, r2\n\tadd\tstack-[8], r0, r9\n\tand!\tr9, r2, r3\n\tld\tr1, r1\n\tjump.ne\t@.BB0_25\n\tadd\t32, r0, r2\n\tadd\tstack-[9], r0, r6\n\tadd\tstack-[7], r0, r7\n\tadd\tstack-[6], r0, r8\n\tadd\tstack-[5], r0, r10\n\tjump\t@.BB0_27\n.BB0_35:\n\tsub.s!\t@CPI0_16[0], r3, r4\n\tjump.gt\t@.BB0_38\n\tsub.s!\t@CPI0_19[0], r3, r4\n\tjump.eq\t@.BB0_46\n\tsub.s!\t@CPI0_20[0], r3, r1\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t3, r0, r3\n\tsload\tr3, r2\n\tand!\t1, r2, r4\n\tshr.s\t1, r2, r5\n\tand\t127, r5, r1\n\tadd.ne\tr5, r0, r1\n\tsub.s!\t31, r1, r5\n\tadd\t0, r0, r5\n\tadd.gt\t1, r0, r5\n\txor\tr2, r5, r5\n\tand!\t1, r5, r5\n\tjump.ne\t@.BB0_4\n\tst.1\t128, r1\n\tsub!\tr4, r0, r4\n\tjump.eq\t@.BB0_56\n\tst.1\t0, r3\n\tsub!\tr1, r0, r2\n\tadd\tr0, r0, r2\n\tjump.eq\t@.BB0_53\n\tadd\t@CPI0_29[0], r0, r3\n\tadd\tr0, r0, r2\n.BB0_59:\n\tsload\tr3, r4\n\tadd\t160, r2, r5\n\tst.1\tr5, r4\n\tadd\t1, r3, r3\n\tadd\t32, r2, r2\n\tsub!\tr2, r1, r4\n\tjump.lt\t@.BB0_59\n\tjump\t@.BB0_53\n.BB0_41:\n\tsub.s!\t@CPI0_14[0], r3, r4\n\tjump.eq\t@.BB0_95\n\tsub.s!\t@CPI0_15[0], r3, r3\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr3\n\tsub.s!\t36, r2, r2\n\tjump.lt\t@.BB0_2\n\tsub!\tr3, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tadd\t5, r0, r2\n\tsload\tr2, r3\n\tsub!\tr1, r3, r3\n\tjump.ge\t@.BB0_2\n\tst.1\t0, r2\n\tshl.s\t1, r1, r5\n\tadd\t@CPI0_23[0], r5, r1\n\tsload\tr1, r2\n\tand!\t1, r2, r3\n\tshr.s\t1, r2, r4\n\tand\t127, r4, r6\n\tadd.ne\tr4, r0, r6\n\tsub.s!\t31, r6, r4\n\tadd\t0, r0, r4\n\tadd.gt\t1, r0, r4\n\txor\tr2, r4, r4\n\tand!\t1, r4, r4\n\tjump.ne\t@.BB0_4\n\tadd\tr5, r0, stack-[9]\n\tst.1\t128, r6\n\tsub!\tr3, r0, r3\n\tjump.eq\t@.BB0_105\n\tadd\tr6, r0, stack-[8]\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_2[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[8], r0, r5\n\tsub!\tr5, r0, r2\n\tjump.ne\t@.BB0_109\n\tadd\t160, r0, r1\n\tjump\t@.BB0_104\n.BB0_38:\n\tsub.s!\t@CPI0_17[0], r3, r4\n\tjump.eq\t@.BB0_60\n\tsub.s!\t@CPI0_18[0], r3, r3\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr3\n\tsub.s!\t68, r2, r4\n\tjump.lt\t@.BB0_2\n\tsub!\tr3, r0, r3\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r3\n\tld\tr3, r4\n\tsub.s!\t@CPI0_7[0], r4, r3\n\tjump.gt\t@.BB0_2\n\tadd\t35, r4, r3\n\tsub!\tr3, r2, r3\n\tjump.ge\t@.BB0_2\n\tadd\t4, r4, r5\n\tptr.add\tr1, r5, r3\n\tld\tr3, r3\n\tsub.s!\t@CPI0_7[0], r3, r6\n\tjump.gt\t@.BB0_12\n\tadd\t31, r3, r6\n\tsub.s\t32, r0, r9\n\tand\tr6, r9, r6\n\tadd\t63, r6, r6\n\tand\tr6, r9, r6\n\tsub.s!\t@CPI0_5[0], r6, r7\n\tjump.le\t@.BB0_68\n.BB0_12:\n\tadd\t@CPI0_27[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_28[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_60:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tsload\tr0, r1\n\tand\t@CPI0_7[0], r1, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_22[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_112:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t100, r0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_22[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_46:\n\tcontext.get_context_u128\tr3\n\tsub.s!\t36, r2, r2\n\tjump.lt\t@.BB0_2\n\tsub!\tr3, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tsub.s!\t@CPI0_7[0], r1, r2\n\tjump.gt\t@.BB0_2\n\tsload\tr0, r2\n\tand\t@CPI0_30[0], r2, r2\n\tor\tr2, r1, r1\n\tsstore\tr0, r1\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_95:\n\tcontext.get_context_u128\tr3\n\tsub.s!\t36, r2, r4\n\tjump.lt\t@.BB0_2\n\tsub!\tr3, r0, r3\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tsub.s!\t@CPI0_7[0], r1, r3\n\tjump.le\t@.BB0_98\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_98:\n\tadd\t4, r1, r1\n\tnear_call\tr0, @abi_decode_string, @DEFAULT_UNWIND\n\tld.1.inc\tr1, r3, r1\n\tadd\tr3, r0, stack-[8]\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[9]\n\tnear_call\tr0, @copy_memory_to_memory_with_cleanup, @DEFAULT_UNWIND\n\tadd\tstack-[8], r0, r3\n\tadd\tstack-[9], r0, r1\n\tadd\tr3, r1, r4\n\tadd\t6, r0, r2\n\tst.1\tr4, r2\n\tadd\t32, r3, r2\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tsload\tr1, r1\n\tld.1\t64, r2\n\tst.1\tr2, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tor\t@CPI0_25[0], r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_119:\n\tsub.s\t256, r0, r3\n\tand\tr2, r3, r2\n\tst.1\t160, r2\n\tsub!\tr1, r0, r1\n\tadd\t160, r0, r4\n\tadd.eq\t128, r0, r4\n.BB0_118:\n\tsub.s\t96, r4, r2\n\tadd\t128, r0, r1\n\tadd\tr1, r0, stack-[9]\n\tnear_call\tr0, @finalize_allocation, @DEFAULT_UNWIND\n\tadd\t2, r0, r1\n\tjump\t@.BB0_54\n.BB0_56:\n\tsub.s\t256, r0, r3\n\tand\tr2, r3, r2\n\tst.1\t160, r2\n\tsub!\tr1, r0, r1\n\tadd\t32, r0, r2\n\tadd.eq\t0, r0, r2\n.BB0_53:\n\tadd\t32, r2, r2\n\tadd\t128, r0, r1\n\tadd\tr1, r0, stack-[9]\n\tnear_call\tr0, @finalize_allocation, @DEFAULT_UNWIND\n\tadd\t4, r0, r1\n.BB0_54:\n\tsload\tr1, r3\n\tld.1\t64, r1\n\tadd\tr1, r0, stack-[8]\n\tadd\tstack-[9], r0, r2\n\tnear_call\tr0, @abi_encode_string_uint256, @DEFAULT_UNWIND\n\tadd\tstack-[8], r0, r4\n.BB0_55:\n\tsub\tr1, r4, r1\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.ge\tr2, r0, r4\n\tshl.s\t64, r4, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_30:\n\tsub!\tr5, r0, r1\n\tadd\tr0, r0, r1\n\tjump.eq\t@.BB0_32\n\tld.1\tr9, r1\n.BB0_32:\n\tshl.s\t3, r5, r2\n\tsub.s\t1, r0, r3\n\tshr\tr3, r2, r2\n\txor\tr2, r3, r2\n\tand\tr1, r2, r1\n\tshl.s\t1, r5, r6\n\tjump\t@.BB0_21\n.BB0_105:\n\tsub.s\t256, r0, r1\n\tand\tr2, r1, r1\n\tst.1\t160, r1\n\tsub!\tr6, r0, r1\n\tadd\t192, r0, r1\n\tadd.eq\t160, r0, r1\n.BB0_104:\n\tsub.s\t128, r1, r2\n\tadd\t128, r0, r1\n\tadd\tr1, r0, stack-[8]\n\tnear_call\tr0, @finalize_allocation, @DEFAULT_UNWIND\n\tadd\tstack-[9], r0, r1\n\tadd\t@CPI0_24[0], r1, r1\n\tsload\tr1, r3\n\tld.1\t64, r1\n\tadd\tr1, r0, stack-[9]\n\tadd\tstack-[8], r0, r2\n\tnear_call\tr0, @abi_encode_string_uint256, @DEFAULT_UNWIND\n\tadd\tstack-[9], r0, r4\n\tjump\t@.BB0_55\n.BB0_68:\n\tadd\t128, r6, r6\n\tst.1\t64, r6\n\tst.1\t128, r3\n\tadd\tr4, r3, r4\n\tadd\t36, r4, r4\n\tsub!\tr4, r2, r2\n\tjump.gt\t@.BB0_2\n\tadd\t32, r5, r2\n\tptr.add\tr1, r2, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_123\n\tadd\tr0, r0, r6\n.BB0_71:\n\tshl.s\t5, r6, r7\n\tptr.add\tr2, r7, r8\n\tld\tr8, r8\n\tadd\t160, r7, r7\n\tst.1\tr7, r8\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_71\n.BB0_123:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_73\n\tshl.s\t5, r5, r5\n\tptr.add\tr2, r5, r2\n\tshl.s\t3, r4, r4\n\tadd\t160, r5, r5\n\tld.1\tr5, r6\n\tshl\tr6, r4, r6\n\tshr\tr6, r4, r6\n\tld\tr2, r2\n\tsub\t256, r4, r4\n\tshr\tr2, r4, r2\n\tshl\tr2, r4, r2\n\tor\tr2, r6, r2\n\tst.1\tr5, r2\n.BB0_73:\n\tadd\t160, r3, r2\n\tst.1\tr2, r0\n\tptr.add.s\t36, r1, r1\n\tld\tr1, r5\n\tld.1\t64, r1\n\tsub.s!\t@CPI0_26[0], r1, r2\n\tjump.gt\t@.BB0_12\n\tadd\t64, r1, r2\n\tst.1\t64, r2\n\tadd\t128, r0, r2\n\tst.1.inc\tr1, r2, r6\n\tst.1\tr6, r5\n\tadd\t5, r0, r3\n\tsload\tr3, r2\n\tsub.s!\t@CPI0_7[0], r2, r4\n\tjump.gt\t@.BB0_12\n\tadd\t1, r2, r4\n\tsstore\tr3, r4\n\tst.1\t0, r3\n\tshl.s\t1, r2, r2\n\tadd\t@CPI0_23[0], r2, r3\n\tld.1\tr1, r7\n\tld.1.inc\tr7, r4, r8\n\tsub.s!\t@CPI0_7[0], r4, r1\n\tjump.gt\t@.BB0_12\n\tadd\tr8, r0, stack-[2]\n\tadd\tr7, r0, stack-[3]\n\tadd\tr4, r0, stack-[9]\n\tadd\tr9, r0, stack-[4]\n\tadd\tr2, r0, stack-[5]\n\tadd\tr6, r0, stack-[6]\n\tadd\tr5, r0, stack-[7]\n\tadd\tr3, r0, stack-[8]\n\tsload\tr3, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r2\n\tand\t127, r2, r3\n\tadd.ne\tr2, r0, r3\n\tsub.s!\t31, r3, r2\n\tadd\t0, r0, r2\n\tadd.gt\t1, r0, r2\n\txor\tr1, r2, r1\n\tand!\t1, r1, r1\n\tjump.ne\t@.BB0_4\n\tadd\tr3, r0, stack-[1]\n\tsub.s!\t32, r3, r1\n\tjump.lt\t@.BB0_81\n\tadd\tstack-[8], r0, r1\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_2[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[9], r0, r3\n\tadd\t31, r3, r2\n\tshr.s\t5, r2, r2\n\tsub.s!\t32, r3, r3\n\tadd.lt\tr0, r0, r2\n\tld\tr1, r3\n\tadd\tstack-[1], r0, r1\n\tadd\t31, r1, r1\n\tshr.s\t5, r1, r1\n\tadd\tr3, r1, r1\n\tadd\tr3, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.ge\t@.BB0_81\n.BB0_82:\n\tsstore\tr2, r0\n\tadd\t1, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.lt\t@.BB0_82\n.BB0_81:\n\tadd\tstack-[9], r0, r1\n\tsub.s!\t31, r1, r1\n\tjump.le\t@.BB0_92\n\tadd\tstack-[8], r0, r1\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_2[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tadd\tstack-[4], r0, r2\n\tjump.eq\t@.BB0_2\n\tand!\tstack-[9], r2, r3\n\tld\tr1, r1\n\tjump.ne\t@.BB0_87\n\tadd\t32, r0, r2\n\tjump\t@.BB0_89\n.BB0_25:\n\tadd\t32, r0, r2\n\tadd\tr0, r0, r4\n\tadd\tstack-[9], r0, r6\n\tadd\tstack-[7], r0, r7\n\tadd\tstack-[6], r0, r8\n\tadd\tstack-[5], r0, r10\n.BB0_26:\n\tadd\tr2, r10, r5\n\tld.1\tr5, r5\n\tsstore\tr1, r5\n\tadd\t32, r2, r2\n\tadd\t1, r1, r1\n\tadd\t32, r4, r4\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB0_26\n.BB0_27:\n\tsub!\tr3, r9, r3\n\tjump.ge\t@.BB0_29\n\tshl.s\t3, r9, r3\n\tand\t248, r3, r3\n\tsub.s\t1, r0, r4\n\tshr\tr4, r3, r3\n\txor\tr3, r4, r3\n\tadd\tr2, r10, r2\n\tld.1\tr2, r2\n\tand\tr2, r3, r2\n\tsstore\tr1, r2\n.BB0_29:\n\tshl.s\t1, r9, r1\n.BB0_21:\n\tor\tr1, r6, r1\n\tsstore\tr8, r1\n\tld.1\tr7, r1\n\tadd\t4, r0, r2\n\tsstore\tr2, r1\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_8[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_109:\n\tld\tr1, r1\n\tadd\tr0, r0, r3\n.BB0_110:\n\tadd\tr3, r0, r2\n\tsload\tr1, r3\n\tadd\t160, r2, r4\n\tst.1\tr4, r3\n\tadd\t1, r1, r1\n\tadd\t32, r2, r3\n\tsub!\tr3, r5, r4\n\tjump.lt\t@.BB0_110\n\tadd\t192, r2, r1\n\tjump\t@.BB0_104\n.BB0_92:\n\tsub!\tstack-[9], r0, r1\n\tadd\tr0, r0, r1\n\tjump.eq\t@.BB0_94\n\tadd\tstack-[2], r0, r1\n\tld.1\tr1, r1\n.BB0_94:\n\tadd\tstack-[9], r0, r4\n\tshl.s\t3, r4, r2\n\tsub.s\t1, r0, r3\n\tshr\tr3, r2, r2\n\txor\tr2, r3, r2\n\tand\tr1, r2, r2\n\tshl.s\t1, r4, r1\n\tjump\t@.BB0_83\n.BB0_87:\n\tadd\t32, r0, r2\n\tadd\tr0, r0, r4\n\tadd\tstack-[3], r0, r6\n.BB0_88:\n\tadd\tr2, r6, r5\n\tld.1\tr5, r5\n\tsstore\tr1, r5\n\tadd\t32, r2, r2\n\tadd\t1, r1, r1\n\tadd\t32, r4, r4\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB0_88\n.BB0_89:\n\tsub.s!\tstack-[9], r3, r3\n\tjump.ge\t@.BB0_91\n\tadd\tstack-[9], r0, r3\n\tshl.s\t3, r3, r3\n\tand\t248, r3, r3\n\tsub.s\t1, r0, r4\n\tshr\tr4, r3, r3\n\txor\tr3, r4, r3\n\tadd\tstack-[3], r2, r2\n\tld.1\tr2, r2\n\tand\tr2, r3, r2\n\tsstore\tr1, r2\n.BB0_91:\n\tadd\t1, r0, r1\n\tadd\tstack-[9], r0, r2\n\tshl.s\t1, r2, r2\n.BB0_83:\n\tor\tr2, r1, r1\n\tadd\tstack-[8], r0, r2\n\tsstore\tr2, r1\n\tadd\tstack-[5], r0, r1\n\tadd\t@CPI0_24[0], r1, r1\n\tadd\tstack-[6], r0, r2\n\tld.1\tr2, r2\n\tsstore\tr1, r2\n\tld.1\t128, r3\n\tadd\tr3, r0, stack-[8]\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[9]\n\tadd\t160, r0, r1\n\tnear_call\tr0, @copy_memory_to_memory_with_cleanup, @DEFAULT_UNWIND\n\tadd\tstack-[8], r0, r3\n\tadd\tstack-[9], r0, r1\n\tadd\tr3, r1, r4\n\tadd\t6, r0, r2\n\tst.1\tr4, r2\n\tadd\t32, r3, r2\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tadd\tstack-[7], r0, r2\n\tsstore\tr1, r2\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.func_end0:\n\nfinalize_allocation:\n.func_begin1:\n\tadd\t31, r2, r2\n\tsub.s\t32, r0, r3\n\tand\tr2, r3, r2\n\tadd\tr2, r1, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI1_0[0], r1, r3\n\tjump.gt\t@.BB1_2\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB1_2\n\tst.1\t64, r1\n\tret\n.BB1_2:\n\tadd\t@CPI1_1[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI1_2[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end1:\n\ncopy_memory_to_memory_with_cleanup:\n.func_begin2:\n\tsub!\tr3, r0, r4\n\tjump.eq\t@.BB2_3\n\tadd\tr0, r0, r4\n.BB2_2:\n\tadd\tr4, r2, r5\n\tadd\tr4, r1, r6\n\tld.1\tr6, r6\n\tst.1\tr5, r6\n\tadd\t32, r4, r4\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB2_2\n.BB2_3:\n\tadd\tr3, r2, r1\n\tst.1\tr1, r0\n\tret\n.func_end2:\n\nabi_encode_string_uint256:\n.func_begin3:\n\tadd\t64, r0, r4\n\tst.1.inc\tr1, r4, r4\n\tadd\t64, r1, r6\n\tld.1.inc\tr2, r2, r5\n\tst.1\tr6, r2\n\tadd\t96, r1, r1\n\tsub!\tr2, r0, r6\n\tjump.eq\t@.BB3_3\n\tadd\tr0, r0, r6\n.BB3_2:\n\tadd\tr6, r1, r7\n\tadd\tr5, r6, r8\n\tld.1\tr8, r8\n\tst.1\tr7, r8\n\tadd\t32, r6, r6\n\tsub!\tr6, r2, r7\n\tjump.lt\t@.BB3_2\n.BB3_3:\n\tadd\tr2, r1, r5\n\tst.1\tr5, r0\n\tst.1\tr4, r3\n\tadd\t31, r2, r2\n\tsub.s\t32, r0, r3\n\tand\tr2, r3, r2\n\tadd\tr1, r2, r1\n\tret\n.func_end3:\n\nabi_decode_string:\n.func_begin4:\n\tadd\tr1, r0, r3\n\tadd\t31, r3, r1\n\tadd\t@CPI4_0[0], r0, r4\n\tsub!\tr1, r2, r5\n\tadd\tr0, r0, r5\n\tadd.lt\tr4, r0, r5\n\tand\t@CPI4_0[0], r2, r6\n\tand\t@CPI4_0[0], r1, r1\n\tsub!\tr1, r6, r7\n\tadd.le\tr0, r0, r4\n\txor\tr1, r6, r1\n\tsub.s!\t@CPI4_0[0], r1, r1\n\tadd.ne\tr5, r0, r4\n\tsub!\tr4, r0, r1\n\tjump.eq\t@.BB4_1\n\tptr.add\tstack[@ptr_calldata], r0, r6\n\tptr.add\tr6, r3, r1\n\tld\tr1, r4\n\tsub.s!\t@CPI4_1[0], r4, r1\n\tjump.ge\t@.BB4_3\n\tadd\t31, r4, r1\n\tsub.s\t32, r0, r5\n\tand\tr1, r5, r1\n\tadd\t63, r1, r1\n\tand\tr1, r5, r5\n\tld.1\t64, r1\n\tadd\tr1, r5, r5\n\tsub!\tr5, r1, r7\n\tadd\t0, r0, r7\n\tadd.lt\t1, r0, r7\n\tsub.s!\t@CPI4_2[0], r5, r8\n\tjump.gt\t@.BB4_3\n\tand!\t1, r7, r7\n\tjump.ne\t@.BB4_3\n\tst.1\t64, r5\n\tst.1.inc\tr1, r4, r5\n\tadd\t32, r3, r3\n\tadd\tr3, r4, r7\n\tsub!\tr7, r2, r2\n\tjump.gt\t@.BB4_1\n\tptr.add\tr6, r3, r3\n\tand\t31, r4, r2\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB4_12\n\tadd\tr0, r0, r7\n.BB4_9:\n\tshl.s\t5, r7, r8\n\tadd\tr5, r8, r9\n\tptr.add\tr3, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB4_9\n.BB4_12:\n\tsub!\tr2, r0, r7\n\tjump.eq\t@.BB4_11\n\tshl.s\t5, r6, r6\n\tptr.add\tr3, r6, r3\n\tadd\tr5, r6, r6\n\tshl.s\t3, r2, r2\n\tld.1\tr6, r7\n\tshl\tr7, r2, r7\n\tshr\tr7, r2, r7\n\tld\tr3, r3\n\tsub\t256, r2, r2\n\tshr\tr3, r2, r3\n\tshl\tr3, r2, r2\n\tor\tr2, r7, r2\n\tst.1\tr6, r2\n.BB4_11:\n\tadd\tr5, r4, r2\n\tst.1\tr2, r0\n\tret\n.BB4_3:\n\tadd\t@CPI4_3[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI4_4[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB4_1:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end4:\n\n__sha3:\n.func_begin5:\n\tadd\t@CPI5_0[0], r0, r3\n\tsub.s!\t@CPI5_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tshl.s\t64, r1, r1\n\tsub.s!\t@CPI5_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t96, r2, r2\n\tor\tr2, r1, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI5_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI5_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB5_2\n\tld\tr1, r1\n\tret\n.BB5_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end5:\n\n__staticcall:\n.func_begin6:\n.tmp0:\n\tfar_call.static\tr1, r2, @.BB6_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB6_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end6:\n\n\t.data\n\t.p2align\t5, 0x0\nptr_calldata:\n.cell\t0\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\nCPI5_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 45403431057183659211707740559400116675059606179742821979959659841155965648896\nCPI0_2:\n\t.cell 904625697166532776746648320380374280103671757735618107014721178055227736064\nCPI0_3:\n\t.cell -411376139330301510538742295639337626245683966408394965837152256\nCPI0_4:\n\t.cell 18446744073709551552\nCPI0_5:\n\t.cell 18446744073709551487\nCPI0_6:\n\t.cell 45885691042493437491553519938456976416791004730559100009324757856288013025280\nCPI0_7:\nCPI1_0:\nCPI4_2:\n\t.cell 18446744073709551615\nCPI0_8:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_9:\n\t.cell 2428759628\nCPI0_10:\n\t.cell 3262262987\nCPI0_11:\n\t.cell 3262262988\nCPI0_12:\n\t.cell 3396840293\nCPI0_13:\n\t.cell 3437480023\nCPI0_14:\n\t.cell 2428759629\nCPI0_15:\n\t.cell 2734287558\nCPI0_16:\n\t.cell 1193245918\nCPI0_17:\n\t.cell 1193245919\nCPI0_18:\n\t.cell 1561303688\nCPI0_19:\n\t.cell 496647133\nCPI0_20:\n\t.cell 703554288\nCPI0_21:\n\t.cell -35707666377435648211887908874984608119992236509074197713628505308453184860938\nCPI0_22:\n\t.cell 2535301202817642044428229017600\nCPI0_23:\n\t.cell 1546678032441257452667456735582814959992782782816731922691272282333561699760\nCPI0_24:\n\t.cell 1546678032441257452667456735582814959992782782816731922691272282333561699761\nCPI0_25:\n\t.cell 2535301200456458802993406410752\nCPI0_26:\n\t.cell 18446744073709551551\nCPI0_27:\nCPI1_1:\nCPI4_3:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_28:\nCPI1_2:\nCPI4_4:\n\t.cell 2852213850513516153367582212096\nCPI0_29:\n\t.cell -27889059366240281169193357100633332908378892778709981755071813198463099602853\nCPI0_30:\n\t.cell -18446744073709551616\nCPI4_0:\n\t.cell -57896044618658097711785492504343953926634992332820282019728792003956564819968\nCPI4_1:\n\t.cell 18446744073709551616\nCPI5_1:\n\t.cell 904625697166532776746648320380374280103671755200316906558262375061821325312\n","bytecode":{"object":""},"methodIdentifiers":{"calculate()":"ca77ab65","daniel()":"cce3c857","erazo()":"29ef62f0","favoriteNumber()":"471f7cdf","getStore()":"c2722ecc","nameToAge(string)":"90c3ee4d","persons(uint256)":"a2f9eac6","pushPerson(string,uint256)":"5d0f9a88","store(uint64)":"1d9a3bdd"}},"irOptimized":"/// @use-src 0:\"contracts/SimpleStorage.sol\"\nobject \"SimpleStorage_82\" {\n    code {\n        {\n            /// @src 0:58:1141  \"contract SimpleStorage {...\"\n            mstore(64, memoryguard(0x80))\n            if callvalue() { revert(0, 0) }\n            /// @src 0:312:332  \"Person(\\\"daniel\\\", 10)\"\n            let expr_mpos := /** @src 0:58:1141  \"contract SimpleStorage {...\" */ allocate_memory()\n            let memPtr := allocate_memory()\n            mstore(memPtr, 6)\n            let _1 := 32\n            mstore(add(memPtr, _1), \"daniel\")\n            mstore(expr_mpos, memPtr)\n            /// @src 0:312:332  \"Person(\\\"daniel\\\", 10)\"\n            let _2 := add(expr_mpos, /** @src 0:58:1141  \"contract SimpleStorage {...\" */ _1)\n            mstore(_2, /** @src 0:329:331  \"10\" */ 0x0a)\n            /// @src 0:58:1141  \"contract SimpleStorage {...\"\n            let newLen := mload(memPtr)\n            let _3 := sub(shl(64, 1), 1)\n            if gt(newLen, _3)\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:58:1141  \"contract SimpleStorage {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 0:58:1141  \"contract SimpleStorage {...\" */ 0x24)\n            }\n            /// @src 0:312:332  \"Person(\\\"daniel\\\", 10)\"\n            let _4 := 0x01\n            /// @src 0:58:1141  \"contract SimpleStorage {...\"\n            let _5 := sload(/** @src 0:312:332  \"Person(\\\"daniel\\\", 10)\" */ _4)\n            /// @src 0:58:1141  \"contract SimpleStorage {...\"\n            let length := /** @src -1:-1:-1 */ 0\n            /// @src 0:58:1141  \"contract SimpleStorage {...\"\n            length := shr(/** @src 0:312:332  \"Person(\\\"daniel\\\", 10)\" */ _4, /** @src 0:58:1141  \"contract SimpleStorage {...\" */ _5)\n            let outOfPlaceEncoding := and(_5, /** @src 0:312:332  \"Person(\\\"daniel\\\", 10)\" */ _4)\n            /// @src 0:58:1141  \"contract SimpleStorage {...\"\n            if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n            if eq(outOfPlaceEncoding, lt(length, _1))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:58:1141  \"contract SimpleStorage {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x22)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 0:58:1141  \"contract SimpleStorage {...\" */ 0x24)\n            }\n            let _6 := 31\n            if gt(length, _6)\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:312:332  \"Person(\\\"daniel\\\", 10)\" */ _4)\n                /// @src 0:58:1141  \"contract SimpleStorage {...\"\n                let data := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:58:1141  \"contract SimpleStorage {...\" */ _1)\n                let deleteStart := add(data, shr(5, add(newLen, _6)))\n                if lt(newLen, _1) { deleteStart := data }\n                let _7 := add(data, shr(5, add(length, _6)))\n                let start := deleteStart\n                for { }\n                lt(start, _7)\n                {\n                    start := add(start, /** @src 0:312:332  \"Person(\\\"daniel\\\", 10)\" */ _4)\n                }\n                /// @src 0:58:1141  \"contract SimpleStorage {...\"\n                {\n                    sstore(start, /** @src -1:-1:-1 */ 0)\n                }\n            }\n            /// @src 0:58:1141  \"contract SimpleStorage {...\"\n            let srcOffset := /** @src -1:-1:-1 */ 0\n            /// @src 0:58:1141  \"contract SimpleStorage {...\"\n            srcOffset := _1\n            switch gt(newLen, _6)\n            case 1 {\n                let loopEnd := and(newLen, not(31))\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:312:332  \"Person(\\\"daniel\\\", 10)\" */ _4)\n                /// @src 0:58:1141  \"contract SimpleStorage {...\"\n                let dstPtr := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:58:1141  \"contract SimpleStorage {...\" */ _1)\n                let i := /** @src -1:-1:-1 */ 0\n                /// @src 0:58:1141  \"contract SimpleStorage {...\"\n                for { } lt(i, loopEnd) { i := add(i, _1) }\n                {\n                    sstore(dstPtr, mload(add(memPtr, srcOffset)))\n                    dstPtr := add(dstPtr, /** @src 0:312:332  \"Person(\\\"daniel\\\", 10)\" */ _4)\n                    /// @src 0:58:1141  \"contract SimpleStorage {...\"\n                    srcOffset := add(srcOffset, _1)\n                }\n                if lt(loopEnd, newLen)\n                {\n                    let lastValue := mload(add(memPtr, srcOffset))\n                    sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n                }\n                sstore(/** @src 0:312:332  \"Person(\\\"daniel\\\", 10)\" */ _4, /** @src 0:58:1141  \"contract SimpleStorage {...\" */ add(shl(/** @src 0:312:332  \"Person(\\\"daniel\\\", 10)\" */ _4, /** @src 0:58:1141  \"contract SimpleStorage {...\" */ newLen), /** @src 0:312:332  \"Person(\\\"daniel\\\", 10)\" */ _4))\n            }\n            default /// @src 0:58:1141  \"contract SimpleStorage {...\"\n            {\n                let value := /** @src -1:-1:-1 */ 0\n                /// @src 0:58:1141  \"contract SimpleStorage {...\"\n                if newLen\n                {\n                    value := mload(add(memPtr, srcOffset))\n                }\n                sstore(/** @src 0:312:332  \"Person(\\\"daniel\\\", 10)\" */ _4, /** @src 0:58:1141  \"contract SimpleStorage {...\" */ or(and(value, not(shr(shl(3, newLen), not(0)))), shl(/** @src 0:312:332  \"Person(\\\"daniel\\\", 10)\" */ _4, /** @src 0:58:1141  \"contract SimpleStorage {...\" */ newLen)))\n            }\n            sstore(2, mload(_2))\n            /// @src 0:361:380  \"Person(\\\"erazo\\\", 42)\"\n            let expr_mpos_1 := /** @src 0:58:1141  \"contract SimpleStorage {...\" */ allocate_memory()\n            let memPtr_1 := allocate_memory()\n            mstore(memPtr_1, 5)\n            mstore(add(memPtr_1, _1), \"erazo\")\n            mstore(expr_mpos_1, memPtr_1)\n            /// @src 0:361:380  \"Person(\\\"erazo\\\", 42)\"\n            let _8 := add(expr_mpos_1, /** @src 0:58:1141  \"contract SimpleStorage {...\" */ _1)\n            mstore(_8, /** @src 0:377:379  \"42\" */ 0x2a)\n            /// @src 0:58:1141  \"contract SimpleStorage {...\"\n            let newLen_1 := mload(memPtr_1)\n            if gt(newLen_1, _3)\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:58:1141  \"contract SimpleStorage {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 0:58:1141  \"contract SimpleStorage {...\" */ 0x24)\n            }\n            /// @src 0:361:380  \"Person(\\\"erazo\\\", 42)\"\n            let _9 := 0x03\n            /// @src 0:58:1141  \"contract SimpleStorage {...\"\n            let _10 := sload(/** @src 0:361:380  \"Person(\\\"erazo\\\", 42)\" */ _9)\n            /// @src 0:58:1141  \"contract SimpleStorage {...\"\n            let length_1 := /** @src -1:-1:-1 */ 0\n            /// @src 0:58:1141  \"contract SimpleStorage {...\"\n            length_1 := shr(/** @src 0:312:332  \"Person(\\\"daniel\\\", 10)\" */ _4, /** @src 0:58:1141  \"contract SimpleStorage {...\" */ _10)\n            let outOfPlaceEncoding_1 := and(_10, /** @src 0:312:332  \"Person(\\\"daniel\\\", 10)\" */ _4)\n            /// @src 0:58:1141  \"contract SimpleStorage {...\"\n            if iszero(outOfPlaceEncoding_1)\n            {\n                length_1 := and(length_1, 0x7f)\n            }\n            if eq(outOfPlaceEncoding_1, lt(length_1, _1))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:58:1141  \"contract SimpleStorage {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x22)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 0:58:1141  \"contract SimpleStorage {...\" */ 0x24)\n            }\n            if gt(length_1, _6)\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:361:380  \"Person(\\\"erazo\\\", 42)\" */ _9)\n                /// @src 0:58:1141  \"contract SimpleStorage {...\"\n                let data_1 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:58:1141  \"contract SimpleStorage {...\" */ _1)\n                let deleteStart_1 := add(data_1, shr(5, add(newLen_1, _6)))\n                if lt(newLen_1, _1) { deleteStart_1 := data_1 }\n                let _11 := add(data_1, shr(5, add(length_1, _6)))\n                let start_1 := deleteStart_1\n                for { }\n                lt(start_1, _11)\n                {\n                    start_1 := add(start_1, /** @src 0:312:332  \"Person(\\\"daniel\\\", 10)\" */ _4)\n                }\n                /// @src 0:58:1141  \"contract SimpleStorage {...\"\n                {\n                    sstore(start_1, /** @src -1:-1:-1 */ 0)\n                }\n            }\n            /// @src 0:58:1141  \"contract SimpleStorage {...\"\n            let srcOffset_1 := /** @src -1:-1:-1 */ 0\n            /// @src 0:58:1141  \"contract SimpleStorage {...\"\n            srcOffset_1 := _1\n            switch gt(newLen_1, _6)\n            case 1 {\n                let loopEnd_1 := and(newLen_1, not(31))\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:361:380  \"Person(\\\"erazo\\\", 42)\" */ _9)\n                /// @src 0:58:1141  \"contract SimpleStorage {...\"\n                let dstPtr_1 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:58:1141  \"contract SimpleStorage {...\" */ _1)\n                let i_1 := /** @src -1:-1:-1 */ 0\n                /// @src 0:58:1141  \"contract SimpleStorage {...\"\n                for { } lt(i_1, loopEnd_1) { i_1 := add(i_1, _1) }\n                {\n                    sstore(dstPtr_1, mload(add(memPtr_1, srcOffset_1)))\n                    dstPtr_1 := add(dstPtr_1, /** @src 0:312:332  \"Person(\\\"daniel\\\", 10)\" */ _4)\n                    /// @src 0:58:1141  \"contract SimpleStorage {...\"\n                    srcOffset_1 := add(srcOffset_1, _1)\n                }\n                if lt(loopEnd_1, newLen_1)\n                {\n                    let lastValue_1 := mload(add(memPtr_1, srcOffset_1))\n                    sstore(dstPtr_1, and(lastValue_1, not(shr(and(shl(/** @src 0:361:380  \"Person(\\\"erazo\\\", 42)\" */ _9, /** @src 0:58:1141  \"contract SimpleStorage {...\" */ newLen_1), 248), not(0)))))\n                }\n                sstore(/** @src 0:361:380  \"Person(\\\"erazo\\\", 42)\" */ _9, /** @src 0:58:1141  \"contract SimpleStorage {...\" */ add(shl(/** @src 0:312:332  \"Person(\\\"daniel\\\", 10)\" */ _4, /** @src 0:58:1141  \"contract SimpleStorage {...\" */ newLen_1), /** @src 0:312:332  \"Person(\\\"daniel\\\", 10)\" */ _4))\n            }\n            default /// @src 0:58:1141  \"contract SimpleStorage {...\"\n            {\n                let value_1 := /** @src -1:-1:-1 */ 0\n                /// @src 0:58:1141  \"contract SimpleStorage {...\"\n                if newLen_1\n                {\n                    value_1 := mload(add(memPtr_1, srcOffset_1))\n                }\n                sstore(/** @src 0:361:380  \"Person(\\\"erazo\\\", 42)\" */ _9, /** @src 0:58:1141  \"contract SimpleStorage {...\" */ or(and(value_1, not(shr(shl(/** @src 0:361:380  \"Person(\\\"erazo\\\", 42)\" */ _9, /** @src 0:58:1141  \"contract SimpleStorage {...\" */ newLen_1), not(0)))), shl(/** @src 0:312:332  \"Person(\\\"daniel\\\", 10)\" */ _4, /** @src 0:58:1141  \"contract SimpleStorage {...\" */ newLen_1)))\n            }\n            sstore(4, mload(_8))\n            let _12 := mload(64)\n            let _13 := datasize(\"SimpleStorage_82_deployed\")\n            codecopy(_12, dataoffset(\"SimpleStorage_82_deployed\"), _13)\n            return(_12, _13)\n        }\n        function allocate_memory() -> memPtr\n        {\n            memPtr := mload(64)\n            let newFreePtr := add(memPtr, 64)\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr))\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            mstore(64, newFreePtr)\n        }\n    }\n    /// @use-src 0:\"contracts/SimpleStorage.sol\"\n    object \"SimpleStorage_82_deployed\" {\n        code {\n            {\n                /// @src 0:58:1141  \"contract SimpleStorage {...\"\n                let _1 := memoryguard(0x80)\n                let _2 := 64\n                mstore(_2, _1)\n                let _3 := 4\n                if iszero(lt(calldatasize(), _3))\n                {\n                    let _4 := 0\n                    switch shr(224, calldataload(_4))\n                    case 0x1d9a3bdd {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                        let value := calldataload(_3)\n                        let _5 := and(value, 0xffffffffffffffff)\n                        if iszero(eq(value, _5)) { revert(_4, _4) }\n                        sstore(_4, or(and(sload(_4), not(0xffffffffffffffff)), _5))\n                        return(_4, _4)\n                    }\n                    case 0x29ef62f0 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let ret := _4\n                        let slotValue := sload(/** @src 0:339:380  \"Person public erazo = Person(\\\"erazo\\\", 42)\" */ 3)\n                        /// @src 0:58:1141  \"contract SimpleStorage {...\"\n                        let length := extract_byte_array_length(slotValue)\n                        mstore(_1, length)\n                        let _6 := 0x20\n                        let _7 := 1\n                        switch and(slotValue, 1)\n                        case 0 {\n                            mstore(add(_1, 0x20), and(slotValue, not(255)))\n                            ret := add(add(_1, shl(5, iszero(iszero(length)))), 0x20)\n                        }\n                        case 1 {\n                            mstore(_4, /** @src 0:339:380  \"Person public erazo = Person(\\\"erazo\\\", 42)\" */ 3)\n                            /// @src 0:58:1141  \"contract SimpleStorage {...\"\n                            let dataPos := 87903029871075914254377627908054574944891091886930582284385770809450030037083\n                            let i := _4\n                            for { } lt(i, length) { i := add(i, _6) }\n                            {\n                                mstore(add(add(_1, i), _6), sload(dataPos))\n                                dataPos := add(dataPos, _7)\n                            }\n                            ret := add(add(_1, i), 0x20)\n                        }\n                        finalize_allocation(_1, sub(ret, _1))\n                        let _8 := sload(_3)\n                        let memPos := mload(_2)\n                        return(memPos, sub(abi_encode_string_uint256(memPos, _1, _8), memPos))\n                    }\n                    case 0x471f7cdf {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let value_1 := and(sload(_4), 0xffffffffffffffff)\n                        let memPos_1 := mload(_2)\n                        mstore(memPos_1, value_1)\n                        return(memPos_1, 32)\n                    }\n                    case 0x5d0f9a88 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                        let offset := calldataload(_3)\n                        let _9 := 0xffffffffffffffff\n                        if gt(offset, _9) { revert(_4, _4) }\n                        let value0 := abi_decode_string(add(_3, offset), calldatasize())\n                        let value_2 := calldataload(36)\n                        let memPtr := mload(_2)\n                        let newFreePtr := add(memPtr, _2)\n                        if or(gt(newFreePtr, _9), lt(newFreePtr, memPtr))\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x41)\n                            revert(_4, 36)\n                        }\n                        mstore(_2, newFreePtr)\n                        mstore(memPtr, value0)\n                        let _10 := 32\n                        /// @src 0:1029:1048  \"Person(_name, _age)\"\n                        let _11 := add(memPtr, /** @src 0:58:1141  \"contract SimpleStorage {...\" */ _10)\n                        mstore(_11, value_2)\n                        let oldLen := sload(/** @src 0:1016:1023  \"persons\" */ 0x05)\n                        /// @src 0:58:1141  \"contract SimpleStorage {...\"\n                        if iszero(lt(oldLen, 18446744073709551616))\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x41)\n                            revert(_4, 36)\n                        }\n                        let _12 := 1\n                        sstore(/** @src 0:1016:1023  \"persons\" */ 0x05, /** @src 0:58:1141  \"contract SimpleStorage {...\" */ add(oldLen, _12))\n                        let slot, offset_1 := storage_array_index_access_struct_Person__dyn(oldLen)\n                        if offset_1\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, _4)\n                            revert(_4, 36)\n                        }\n                        let _13 := mload(memPtr)\n                        let newLen := mload(_13)\n                        if gt(newLen, _9)\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x41)\n                            revert(_4, 36)\n                        }\n                        let _14 := extract_byte_array_length(sload(slot))\n                        if gt(_14, 31)\n                        {\n                            mstore(_4, slot)\n                            let data := keccak256(_4, _10)\n                            let deleteStart := add(data, shr(/** @src 0:1016:1023  \"persons\" */ 0x05, /** @src 0:58:1141  \"contract SimpleStorage {...\" */ add(newLen, 31)))\n                            if lt(newLen, _10) { deleteStart := data }\n                            let _15 := add(data, shr(/** @src 0:1016:1023  \"persons\" */ 0x05, /** @src 0:58:1141  \"contract SimpleStorage {...\" */ add(_14, 31)))\n                            let start := deleteStart\n                            for { } lt(start, _15) { start := add(start, _12) }\n                            { sstore(start, _4) }\n                        }\n                        let srcOffset := _4\n                        srcOffset := _10\n                        switch gt(newLen, 31)\n                        case 1 {\n                            let loopEnd := and(newLen, not(31))\n                            mstore(_4, slot)\n                            let dstPtr := keccak256(_4, _10)\n                            let i_1 := _4\n                            for { } lt(i_1, loopEnd) { i_1 := add(i_1, _10) }\n                            {\n                                sstore(dstPtr, mload(add(_13, srcOffset)))\n                                dstPtr := add(dstPtr, _12)\n                                srcOffset := add(srcOffset, _10)\n                            }\n                            if lt(loopEnd, newLen)\n                            {\n                                let lastValue := mload(add(_13, srcOffset))\n                                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n                            }\n                            sstore(slot, add(shl(_12, newLen), _12))\n                        }\n                        default {\n                            let value_3 := _4\n                            if newLen\n                            {\n                                value_3 := mload(add(_13, srcOffset))\n                            }\n                            sstore(slot, or(and(value_3, not(shr(shl(3, newLen), not(0)))), shl(_12, newLen)))\n                        }\n                        sstore(add(slot, _12), mload(_11))\n                        let pos := mload(_2)\n                        let length_1 := mload(value0)\n                        copy_memory_to_memory_with_cleanup(add(value0, _10), pos, length_1)\n                        let end := add(pos, length_1)\n                        mstore(end, /** @src 0:1059:1068  \"nameToAge\" */ 0x06)\n                        /// @src 0:58:1141  \"contract SimpleStorage {...\"\n                        sstore(keccak256(pos, add(sub(end, pos), _10)), value_2)\n                        return(_4, _4)\n                    }\n                    case 0x90c3ee4d {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                        let offset_2 := calldataload(_3)\n                        if gt(offset_2, 0xffffffffffffffff) { revert(_4, _4) }\n                        let value0_1 := abi_decode_string(add(_3, offset_2), calldatasize())\n                        let pos_1 := mload(_2)\n                        let length_2 := mload(value0_1)\n                        copy_memory_to_memory_with_cleanup(add(value0_1, 32), pos_1, length_2)\n                        let end_1 := add(pos_1, length_2)\n                        mstore(end_1, /** @src 0:1096:1137  \"mapping (string => uint) public nameToAge\" */ 6)\n                        /// @src 0:58:1141  \"contract SimpleStorage {...\"\n                        let _16 := sload(keccak256(pos_1, add(sub(end_1, pos_1), 32)))\n                        let memPos_2 := mload(_2)\n                        mstore(memPos_2, _16)\n                        return(memPos_2, 32)\n                    }\n                    case 0xa2f9eac6 {\n                        if callvalue() { revert(_4, _4) }\n                        let _17 := 32\n                        if slt(add(calldatasize(), not(3)), _17) { revert(_4, _4) }\n                        let value_4 := calldataload(_3)\n                        /// @src 0:725:749  \"Person[] public  persons\"\n                        if iszero(lt(value_4, /** @src 0:58:1141  \"contract SimpleStorage {...\" */ sload(/** @src 0:725:749  \"Person[] public  persons\" */ 5)))\n                        {\n                            revert(/** @src 0:58:1141  \"contract SimpleStorage {...\" */ _4, _4)\n                        }\n                        /// @src 0:725:749  \"Person[] public  persons\"\n                        let slot_1, offset_3 := storage_array_index_access_struct_Person__dyn(value_4)\n                        /// @src 0:58:1141  \"contract SimpleStorage {...\"\n                        let memPtr_1 := mload(_2)\n                        let ret_1 := _4\n                        let slotValue_1 := sload(slot_1)\n                        let length_3 := extract_byte_array_length(slotValue_1)\n                        mstore(memPtr_1, length_3)\n                        let _18 := 1\n                        switch and(slotValue_1, 1)\n                        case 0 {\n                            mstore(add(memPtr_1, _17), and(slotValue_1, not(255)))\n                            ret_1 := add(add(memPtr_1, shl(/** @src 0:725:749  \"Person[] public  persons\" */ 5, /** @src 0:58:1141  \"contract SimpleStorage {...\" */ iszero(iszero(length_3)))), _17)\n                        }\n                        case 1 {\n                            mstore(_4, slot_1)\n                            let dataPos_1 := keccak256(_4, _17)\n                            let i_2 := _4\n                            for { } lt(i_2, length_3) { i_2 := add(i_2, _17) }\n                            {\n                                mstore(add(add(memPtr_1, i_2), _17), sload(dataPos_1))\n                                dataPos_1 := add(dataPos_1, _18)\n                            }\n                            ret_1 := add(add(memPtr_1, i_2), _17)\n                        }\n                        finalize_allocation(memPtr_1, sub(ret_1, memPtr_1))\n                        let _19 := sload(/** @src 0:725:749  \"Person[] public  persons\" */ add(slot_1, /** @src 0:58:1141  \"contract SimpleStorage {...\" */ 1))\n                        let memPos_3 := mload(_2)\n                        return(memPos_3, sub(abi_encode_string_uint256(memPos_3, memPtr_1, _19), memPos_3))\n                    }\n                    case 0xc2722ecc {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let value_5 := and(sload(_4), 0xffffffffffffffff)\n                        let memPos_4 := mload(_2)\n                        mstore(memPos_4, value_5)\n                        return(memPos_4, 32)\n                    }\n                    case 0xca77ab65 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let memPos_5 := mload(_2)\n                        mstore(memPos_5, /** @src 0:705:712  \"10 * 10\" */ 0x64)\n                        /// @src 0:58:1141  \"contract SimpleStorage {...\"\n                        return(memPos_5, 32)\n                    }\n                    case 0xcce3c857 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let memPtr_2 := mload(_2)\n                        let ret_2 := _4\n                        /// @src 0:289:332  \"Person public daniel = Person(\\\"daniel\\\", 10)\"\n                        let _20 := 1\n                        /// @src 0:58:1141  \"contract SimpleStorage {...\"\n                        let slotValue_2 := sload(/** @src 0:289:332  \"Person public daniel = Person(\\\"daniel\\\", 10)\" */ 1)\n                        /// @src 0:58:1141  \"contract SimpleStorage {...\"\n                        let length_4 := extract_byte_array_length(slotValue_2)\n                        mstore(memPtr_2, length_4)\n                        let _21 := 0x20\n                        switch and(slotValue_2, /** @src 0:289:332  \"Person public daniel = Person(\\\"daniel\\\", 10)\" */ 1)\n                        case /** @src 0:58:1141  \"contract SimpleStorage {...\" */ 0 {\n                            mstore(add(memPtr_2, 0x20), and(slotValue_2, not(255)))\n                            ret_2 := add(add(memPtr_2, shl(5, iszero(iszero(length_4)))), 0x20)\n                        }\n                        case 1 {\n                            mstore(_4, /** @src 0:289:332  \"Person public daniel = Person(\\\"daniel\\\", 10)\" */ 1)\n                            /// @src 0:58:1141  \"contract SimpleStorage {...\"\n                            let dataPos_2 := 80084422859880547211683076133703299733277748156566366325829078699459944778998\n                            let i_3 := _4\n                            for { } lt(i_3, length_4) { i_3 := add(i_3, _21) }\n                            {\n                                mstore(add(add(memPtr_2, i_3), _21), sload(dataPos_2))\n                                dataPos_2 := add(dataPos_2, /** @src 0:289:332  \"Person public daniel = Person(\\\"daniel\\\", 10)\" */ _20)\n                            }\n                            /// @src 0:58:1141  \"contract SimpleStorage {...\"\n                            ret_2 := add(add(memPtr_2, i_3), 0x20)\n                        }\n                        finalize_allocation(memPtr_2, sub(ret_2, memPtr_2))\n                        let _22 := sload(/** @src 0:289:332  \"Person public daniel = Person(\\\"daniel\\\", 10)\" */ 2)\n                        /// @src 0:58:1141  \"contract SimpleStorage {...\"\n                        let memPos_6 := mload(_2)\n                        return(memPos_6, sub(abi_encode_string_uint256(memPos_6, memPtr_2, _22), memPos_6))\n                    }\n                }\n                revert(0, 0)\n            }\n            function extract_byte_array_length(data) -> length\n            {\n                length := shr(1, data)\n                let outOfPlaceEncoding := and(data, 1)\n                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                if eq(outOfPlaceEncoding, lt(length, 32))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x22)\n                    revert(0, 0x24)\n                }\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function copy_memory_to_memory_with_cleanup(src, dst, length)\n            {\n                let i := 0\n                for { } lt(i, length) { i := add(i, 32) }\n                {\n                    mstore(add(dst, i), mload(add(src, i)))\n                }\n                mstore(add(dst, length), 0)\n            }\n            function abi_encode_string_uint256(headStart, value0, value1) -> tail\n            {\n                mstore(headStart, 64)\n                let length := mload(value0)\n                mstore(add(headStart, 64), length)\n                copy_memory_to_memory_with_cleanup(add(value0, 0x20), add(headStart, 96), length)\n                tail := add(add(headStart, and(add(length, 31), not(31))), 96)\n                mstore(add(headStart, 0x20), value1)\n            }\n            function abi_decode_string(offset, end) -> array\n            {\n                if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n                let _1 := calldataload(offset)\n                if gt(_1, 0xffffffffffffffff)\n                {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 0:58:1141  \"contract SimpleStorage {...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 0:58:1141  \"contract SimpleStorage {...\" */ 0x24)\n                }\n                let memPtr := mload(64)\n                finalize_allocation(memPtr, add(and(add(_1, 0x1f), not(31)), 0x20))\n                mstore(memPtr, _1)\n                if gt(add(add(offset, _1), 0x20), end)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 0:58:1141  \"contract SimpleStorage {...\"\n                calldatacopy(add(memPtr, 0x20), add(offset, 0x20), _1)\n                mstore(add(add(memPtr, _1), 0x20), /** @src -1:-1:-1 */ 0)\n                /// @src 0:58:1141  \"contract SimpleStorage {...\"\n                array := memPtr\n            }\n            function storage_array_index_access_struct_Person__dyn(index) -> slot, offset\n            {\n                if iszero(lt(index, sload(/** @src 0:1016:1023  \"persons\" */ 0x05)))\n                /// @src 0:58:1141  \"contract SimpleStorage {...\"\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x32)\n                    revert(0, 0x24)\n                }\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:1016:1023  \"persons\" */ 0x05)\n                /// @src 0:58:1141  \"contract SimpleStorage {...\"\n                slot := add(1546678032441257452667456735582814959992782782816731922691272282333561699760, shl(1, index))\n                offset := /** @src -1:-1:-1 */ 0\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220a8e96f3a025d64c702182ea43242de5ec8557a777fd09b8c565386a615a5828f64736f6c63430008180033\"\n    }\n}\n","hash":"01000103b891fd054357552bef4fdd98cff6beb19b350748e48e30829c13d835","factoryDependencies":{}}}}}}